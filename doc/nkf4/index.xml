<?xml version="1.0" encoding="utf-8"?>

<book>
    <article>
        <articleinfo>
            <title>Nika Framework 3 (NKF 3) Documentation</title>
            <author>
                <firstname>Alex</firstname>
                <surname>Ivasyuv</surname>
            </author>
            <copyright>
                <year>2012</year>
                <holder>Alex Ivasyuv</holder>
            </copyright>
        </articleinfo>
        <para>
            This document is official documentation for Nika Framework 3.
        </para>
        <section>
            <title>Intro</title>
            <para>
                "Nika Framework" is Architectural Front-End JavaScript Framework. Unlike others, it archives different
                goals.
                It's not UI framework, as it's doesn't provide any UI components and widgets.
                It's also doesn't MVC one, as it has different architecture. This framework allows you to use any UI
                components as you wish,
                and use any JavaScript libraries. All that it provide you - it's powerful architectural style.
            </para>
            <para>
                So what is NKF? It's widget based framework, that allows you to build complex application based on
                widgets.
            </para>
        </section>
        <section>
            <title>Terms</title>

            <variablelist>
                <varlistentry>
                    <term>UI</term>
                    <listitem>
                        <para>
                            User Interface
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>NKF</term>
                    <listitem>
                        <para>
                            Nika Framework
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Abstract Component</term>
                    <listitem>
                        <para>
                            Some type of the following one: layout, page, widget, component
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Layout</term>
                    <listitem>
                        <para>
                            Page layout correspond for components placement
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Page</term>
                    <listitem>
                        <para>
                            Component that has predefined components placement
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Widget</term>
                    <listitem>
                        <para>
                            Some UI part on page that corresponds some logical entity
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>Features</title>
            <para>
                <itemizedlist>
                    <listitem>
                        Full AJAX. All page changing - only via AJAX
                    </listitem>
                    <listitem>
                        One request to server per page. In this request you get all needed data to your components
                    </listitem>
                    <listitem>
                        Event Driven Development (EDD). All Components are absolutely independed and communicate each
                        other
                        via events.
                    </listitem>
                    <listitem>
                        Components reusable. You can use a few times on some page the some component with different
                        view/functionality/etc...
                    </listitem>
                    <listitem>
                        Two files on output: merged.js and merged.css. For production mode merged.jsz and merged.cssz.
                    </listitem>
                    <listitem>
                        XTML, SASS, SVG support.
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section>
            <title>Structure</title>

            <para>
                All Framework divided into two parts:
                <emphasis>common</emphasis>
                and<emphasis>impl</emphasis>.
                In
                <emphasis>common</emphasis>
                we have framework core, and in
                <emphasis>impl</emphasis>
                - user implementation.

                <figure>
                    <title>Base Framework Structure</title>
                    <graphic fileref="img/base-structure.png" />
                </figure>
            </para>
            <para>
                <figure>
                    <title>Detailed Framework Structure</title>
                    <graphic fileref="img/detailed-structure.png" />
                </figure>

                In
                <emphasis>core</emphasis>
                we have the following packages:
                <emphasis>components</emphasis>,<emphasis>network</emphasis>,<emphasis>storage</emphasis>.

                <itemizedlist>
                    <listitem>
                        <para>
                            Components response for all types of components: layout, page, widget and component.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Network response to support different types of network, in online and offline mode.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Storage - saves data into one of available storage type: localStorage, cookies, memory.
                        </para>
                    </listitem>
                </itemizedlist>

            </para>

            <para>
                In
                <emphasis>impl</emphasis>
                we have
                <emphasis>components</emphasis>
                package, that includes all types of components.

                <figure>
                    <title>Base Framework Structure</title>
                    <graphic fileref="img/impl-structure.png" />
                </figure>
            </para>

            <para>
                Each component has predefined structure for JavaScript, XHTML, CSS/SASS, SVG files and images.

                <figure>
                    <title>Component Structure</title>
                    <graphic fileref="img/component-structure.png" />
                </figure>
            </para>

            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>JavaScript</emphasis>
                            files should locate under
                            <emphasis>logic</emphasis>
                            folder.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>XHTML</emphasis>
                            files - under
                            <emphasis>dom</emphasis>
                            folder.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>SVG</emphasis>
                            files - under
                            <emphasis>svg</emphasis>
                            folder.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>CSS/SASS</emphasis>
                            files - under
                            <emphasis>style</emphasis>
                            folder.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>Image</emphasis>
                            files - under
                            <emphasis>img</emphasis>
                            folder.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
                <figure>
                    <title>Detailed Component Structure</title>
                    <graphic fileref="img/detailed-component-structure.png" />
                </figure>

                <note>Please note, that<emphasis>dom</emphasis>,
                    <emphasis>svg</emphasis>
                    and
                    <emphasis>img</emphasis>
                    folder can have a subfolders. Later we will explain how to access them.
                </note>
            </para>
        </section>

        <section>
            <title>Structure - Details Overview</title>
            <para>Lets considering detailed, why we need these folders and how we can use files from them.</para>
            <para>
                <emphasis>dom</emphasis>
                folder used to store your own xhtml piece of code. Later you can access them via inherited method
                <emphasis>_getComponent</emphasis>.

                <programlisting>
    this._getComponent();
                </programlisting>

                Using method without any parameters returns
                <filename>dom/index.xhtml</filename>
                by default.

                <note>
                    Please note, that by default component type is xhtml files. How to access another types - please
                    read
                    below.
                </note>

                To access files in subfolder
                you need to pass
                <code>componentPartName</code>
                key.

                <programlisting>
    this._getComponent({
     componentPartName: "items/controlItem"
    });
                </programlisting>

                will returns<filename>dom/items/controlItem.xhtml</filename>.

                If you what to access for example you
                <emphasis>svg</emphasis>
                files, you need to pass
                <code>componentPart</code>
                key.

                <programlisting>
    this._getComponent({
     componentPart: "svg",
     componentPartName: "items/controlItem"
    });
                </programlisting>

                in this case it returns you<filename>svg/items/controlItem.svg</filename>.
            </para>

            <para>
                <note>
                    Please note, that when you access your components with
                    <code>_getComponent</code>
                    method, it returns it jQuery-wrapped.
                    It means, that you don't need to wrap it again, you can use all jQuery methods on it right after
                    accessing.
                </note>
            </para>
        </section>

        <section>
            <title>Build System</title>
            <para>To understand how later all files from component build, lets considering how build system works.
            </para>
            <para>
                <emphasis>Build System</emphasis>
                relay on
                <filename>impl/conf/include.list</filename>
                file, where you point files that should be included.
                In most cases it's only JavaScript files, and could be one sass file, that include others.

                <programlisting>
<![CDATA[
    impl/extra/style/main.scss

    impl/extra/js/jquery.js
    impl/extra/js/plugins/jquery.attributes.js
    impl/extra/js/plugins/jquery.namespace.js
    impl/extra/js/plugins/string.format.js
    impl/extra/js/plugins/jquery.cookie.js

    impl/extra/js/base64.js

    common/network/NetworkAbstract.js
    common/network/NetworkOnline.js
    common/network/NetworkManager.js

    common/storage/StorageAbstract.js
    common/storage/MemoryStorage.js
    common/storage/CookieStorage.js
    common/storage/LocalStorage.js
    common/storage/StorageManager.js

    .....
]]>
                </programlisting>

                This file need due to right order JavaScript files includes. As for example, a.js could relay on b.js,
                so
                b.js should be included first.
            </para>

            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            So, first Build System runs over
                            <filename>include.list</filename>
                            and include all files that mentioned there.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Next, it runs over
                            <filename>impl</filename>
                            folder and pick up all<emphasis>.xhtml</emphasis>,<emphasis>.svg</emphasis>,
                            <emphasis>.css</emphasis>
                            and
                            <emphasis>.css</emphasis>
                            files
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Than, all scss files convert to css files.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            All images pointed in .xhtml and .css files converted to
                            <code>data:base64</code>
                            protocol.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            All .xhtml files merged into hashmap and available via global variable
                            <code>__dom__</code>
                            <note>
                                You don't have to access that variable directly. Use
                                <code>_getComponent</code>
                                method instead.
                            </note>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            And in the end - generates two files:
                            <filename>merged.css</filename>
                            and
                            <filename>merged.js</filename>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
                Build System works in two modes:
                <emphasis>development</emphasis>
                and<emphasis>production</emphasis>.
                By default it runs in development mode, but if you pass second parameter as
                <emphasis>production</emphasis>
                it will create
                compressed versions of .js and .css, like .jsz and .cssz.
            </para>

            <para>
                Build System located in
                <filename>build</filename>
                folder and written in NodeJS.
            </para>

            <screen>
                <prompt>$</prompt> <userinput>node build.js # runs in development mode</userinput>
            </screen>

            <screen>
                <prompt>$</prompt> <userinput>node build.js production # runs in production mode</userinput>
            </screen>
        </section>

        <section>
            <title>Component Structure</title>
            <para>
                Lets start with JavaScript structure.

                <programlisting language="javascript">
    (function() {
      "use strict";

      var ns = "ks.nkf3.impl.components.layout";
      var self = $.namespace(ns);

      extendClass(Login, ks.nkf3.common.components.component.LayoutAbstract);
      Login.className = "Login";

      function Login() {
        this.className = Login.className;

        this.getRenderedDOM = function() {
          return domComponent;
        };

        function constructor() {
          init.call(this);
        }

        function init() {
        }

        var domComponent = this._getComponent();

        constructor.call(this);
      }

      $.extend(self, {
        Login: Login
      });

    })();</programlisting>

            </para>
            <para>
                As we can see, each component has to implement appropriate super class. For <emphasis>layout</emphasis> it's
                <emphasis>LayoutAbstract</emphasis>, for <emphasis>page</emphasis> it's <emphasis>PageAbstract</emphasis> and so on...
            </para>
            <para>
                Also, we can see that there's a <emphasis>namespace</emphasis> using. In out case it's <code>ks.nkf3.impl.components.layout</code>.
                Each component must be in appropriate namespace.
            </para>
            <para>
                <emphasis>className</emphasis> using for prevent class names while obfuscare.
            </para>
            <para>
                Also, we must to override <code>getRenderedDOM</code> method for each component. This method should return ready <emphasis>DOM</emphasis>
                for component.
            </para>
            <para>Another it's optional.</para>
        </section>

        <section>
            <title>First Application</title>
            <para>
                Lets create a sample application, that allows us to understand how NKF works.
            </para>
            <para>
                 Lets start from <emphasis>Layout</emphasis>. We will use <emphasis>login</emphasis> layout. You can call it whatever you want.
                In our case, it'll responses for showing <emphasis>header</emphasis> and <emphasis>footer</emphasis>.
            </para>
            <para>
                Create in <filename>impl/components/layout</filename> <filename>Login</filename> folder.
                Inside this folder create three folders: <filename>dom</filename>, <filename>style</filename>, <filename>login</filename>.
            </para>
            <para>
                In <filename>logic</filename> folder create file called <filename>Login.js</filename> with the following content:
                <programlisting language="javascript">
    (function() {
      "use strict";

      var ns = "ks.nkf3.impl.components.layout";
      var self = $.namespace(ns);

      extendClass(Login, ks.nkf3.common.components.component.LayoutAbstract);
      Login.className = "Login";

      function Login() {
        this.className = Login.className;

        this.getRenderedDOM = function() {
          return domComponent;
        };

        function constructor() {
          init.call(this);
        }

        function init() {
        }

        var domComponent = this._getComponent();

        constructor.call(this);
      }

      $.extend(self, {
        Login: Login
      });

    })();
                </programlisting>
                In fact, this file do anything but returns <emphasis>DOM</emphasis> for <emphasis>Login</emphasis> layout.
            </para>
            <para>
                Now, lets create <emphasis>DOM</emphasis> for <emphasis>Login</emphasis>. For that, create <filename>dom/index.xhtml</filename> file
                with the following content:

                <programlisting language="html">
    <![CDATA[
    <div>
        <header>
            <div data-nkf-component-type="widget" data-nkf-component-name="Header"></div>
        </header>

        <section></section>

        <footer>
            <div data-nkf-component-type="widget" data-nkf-component-name="Footer"></div>
        </footer>
    </div>
    ]]>
                </programlisting>
                Please pay attention, that we use <emphasis>data-nkf-component-*</emphasis> attributes. Due to them, we define
                what components will be use.
                <code>data-nkf-component-type</code> - corresponds for component type, e.g. <emphasis>layout</emphasis>, <emphasis>page</emphasis>,
                <emphasis>widget</emphasis>, <emphasis>component</emphasis>.
                <code>data-nkf-component-name</code> - component name.
            </para>
            <para>
                Please note, that we have <code>section</code> tag. It required, as in this tag will be written page.
            </para>
            <para>
                Optionally you can create a style for component in <filename>style</filename> folder.
            </para>
            <para>
                So, when framework will render this layout, it'll always show <emphasis>header</emphasis> and <emphasis>footer</emphasis>
                even when you will change content. As all that pointed in layout will never change, until you change layout.
            </para>
            <para>
                In same way, you can create a page. The difference is that it has to be inherited from <code>PageAbstract</code>.
                In <emphasis>DOM</emphasis> you can also defined some widgets that has to be shown.
            </para>
            <para>And in the same manner, you what to create defined widgets. In most cases, actually widgets it's the most complicated components in system.</para>
            <para>
                Lets considered one:
                <programlisting language="javascript">
    (function() {
      "use strict";

      var ns = "ks.nkf3.impl.components.widget";
      var self = $.namespace(ns);

      extendClass(Header, ks.nkf3.common.components.component.WidgetAbstract);
      Header.className = "Header";

      function Header() {

        // --------------------------------------------------------------------
        // Public methods/variables
        // --------------------------------------------------------------------

        this.className = Header.className;

        this.getRenderedDOM = function() {
          return domComponent;
        };

        // --------------------------------------------------------------------
        // Private methods
        // --------------------------------------------------------------------

        function constructor() {
          init.call(this);
        }

        function init() {
          $("#customer-logo img", domComponent).attr({
            src: "/nkf3/impl/extra/img/customers/{customerName}.png".format({
              customerName: globalData.main.customerNickName
            })
          });
        }

        // --------------------------------------------------------------------
        // Private variables
        // --------------------------------------------------------------------

        var domComponent = this._getComponent();
        var widgetData = this._getData();

        var $ComponentManager = ks.nkf3.common.components.ComponentManager.getInstance();
        var globalData = $ComponentManager.getGlobalComponentsData();

        constructor.call(this);
      }

      $.extend(self, {
        Header: Header
      });

    })();
                </programlisting>

                This is quite simple widget, that insert into predefined <emphasis>DOM</emphasis> customer logo.
            </para>
            <para>
                Please paint attention to <code>_getComponent</code> and <code>_getData</code> methods.
                <code>_getComponent</code> - in this case will get default <emphasis>.xhtml</emphasis> file, in our case it's
                <filename>index.xhtml</filename>.
                But <code>_getData</code> method without any parameters will get data for current widget from <emphasis>JSON</emphasis> page file.
                Now lets move further, and look at <code>$ComponentManager</code> variable. In <emphasis>NKF</emphasis> all system variables that refer to
                core functionality, writes with dollar sight.
            </para>
            <para>
                <emphasis>ComponentManager</emphasis> - it's class, that manage components render, page loading and other work that should be manage.
                In this case, we call <emphasis>getGlobalComponentsData</emphasis> method to fetch global component data.
            </para>
            <para>

            </para>
        </section>
        <section>
            <title>JSON Page Data</title>
            <para>

            </para>
        </section>
    </article>
</book>
