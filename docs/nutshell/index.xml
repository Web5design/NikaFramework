<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
        ]>

<book xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>NikaFramework 4 (NKF 4) in a Nutshell</title>

    <article>
        <articleinfo>
            <copyright>
                <year>2011-2013</year>
                <holder>ITHerz</holder>
            </copyright>
        </articleinfo>
        <para>
            Document describes how quickly install and run sample application.
        </para>
        <section>
            <title>Install</title>
            <para>
                Go to
                <ulink url="http://nikaframework.com">NikaFramework website</ulink>
                and download the latest version of SDK.
                After extracting, you have to get the following structure:

                <graphic fileref="img/initial-structure.png" />
            </para>
            <para>
                <emphasis>data</emphasis> - JSON stub for testing purpose
            </para>
            <para>
                <emphasis>localization</emphasis> - tool to helps localize text found in xhtml files
            </para>
             <para>
                <emphasis>nkf4</emphasis> - main SDK folder
            </para>
            <para>
                <emphasis>nkf4/build</emphasis> - build system
            </para>
            <para>
                <emphasis>nkf4/impl</emphasis> - components implementation
            </para>
            <para>
                <emphasis>nkf4/nkf.js</emphasis> - SDK file
            </para>
            <para>
                <emphasis>.htaccess</emphasis> - need for correct working framework
            </para>
            <para>
                <emphasis>index.template.xhtml</emphasis> - template of index file, which content will be used to render
                HTML into.
            </para>

            <para>
                Move all files to any <emphasis>Web Server</emphasis>, for example <emphasis>Apache</emphasis>.
                To get working ensure that <programlisting>AllowOverride All</programlisting> added to Apache config file
                in appropriate place.
            </para>
        </section>

        <section>
            <title>Get running first application</title>

            <section>
                <title>Build Application</title>
                <para>
                    <emphasis>Build System</emphasis> for <application>NKF</application> written on NodeJS. So you need it to build application.
                    Also there other dependencies. So for installation please read README file in <filename
                        class="directory">build</filename> directory.
                </para>
                <para>
                    After all required software is installed, we can move further. In <filename
                        class="directory">build</filename> directory there is a file called
                    <filename>include.list</filename>. There are only two lines:
                    <programlisting>nkf.js

;impl/app.js</programlisting>
                </para>
                <para>
                    It means, that for build it will include only NKF SDK. <filename>impl/app.js</filename> is commented, as
                    at the beginning of line we have <emphasis>;</emphasis>
                    So lets build our application. Go to build folder and execute
                </para>
                <command>node build.js</command>
                <para>
                    In out folder should appear two files:
                    <filename>merged.css</filename> and <filename>merged.js</filename>.
                    But we shouldn't care about them. In root directory should appear <filename>index.xhtmlz</filename> file.
                </para>
                <para>
                   <filename>index.xhtmlz</filename> - generated file by NKF <emphasis>Build System</emphasis> which contains all resources, including
                    JavaScript, XHTML, CSS and any other binary resources such as images, video as base64.
                    For more detail information see <ulink url="http://webresourcebundle.org/">Web Resource Bundle</ulink>
                </para>
                <para>
                    Now hit <ulink url="http://localhost">http://localhost</ulink> in browser. Yes, nothing will happend.
                    We need to write more code to get it works.
                </para>
            </section>

            <section>
                <title>Try to get it working</title>

                <para>
                    Lets uncomment <emphasis>;impl/app.js</emphasis> from <filename>build/include.list</filename> as:
                    <programlisting language="brush: plain"><xi:include href="files/include-1.list" parse="text" /></programlisting>

                    and see at content of that file:
                    <programlisting
                            language="brush: js">$(function() {
  $(document).trigger("nkf.core.Controller", {
    type: nkf.def.events.type.make,
    name: "load",
    data: {
      init: true
    }
  });
});</programlisting>

                    then run build again under build directory
                </para>
                <command>node build.js</command>
                <para>
                    Now refresh a page, and you have to find JavaScript error
                    <emphasis>No implementation found</emphasis>

                    <graphic fileref="img/no-impl-found.png" />
                </para>
                <para>
                    It because we doesn't have our implementation. To get it working we must have at least one <emphasis>layout</emphasis>
                    component and one <emphasis>page</emphasis> component.
                </para>
            </section>

            <section>
                <title>Get it working</title>

                <section>
                    <title>Add layout component</title>

                    <para>
                        <para>
                           Lets start from <emphasis>layout</emphasis>. Each component should be created under appropriate folder.
                           For layout component it's <emphasis>layout</emphasis> folder. This folder should be created under <emphasis>impl</emphasis> folder.
                           Actually all resources, that we are going to create will be under <emphasis>impl</emphasis> folder, as it's "our" folder.
                        </para>
                        <para>
                            As we are non logged in yet, layout by default will be <emphasis>NotLoggedIn</emphasis> (later you can change it).
                            So now, create <filename class="directory">NotLoggedIn</filename> folder under <filename
                                class="directory">impl/layout</filename> folder.
                            Alone create structure, that presented below:

                            <graphic fileref="img/not-logged-in-layout.png" />
                        </para>
                        <para>
                            <emphasis>dom</emphasis> - there will be our <emphasis>xhtml</emphasis> files
                        </para>
                        <para>
                            <emphasis>logic</emphasis> - there will be <emphasis>JavaScript</emphasis> logic
                        </para>
                        <para>
                            <emphasis>style</emphasis> - there will be styles. <emphasis>CSS</emphasis> or <emphasis>Sass</emphasis> (scss)
                        </para>
                        <para>
                            <note>
                                <emphasis>JavaScript</emphasis> filename better to called the same as folder name. In our case it has name <filename>NotLoggedIn.js</filename> as it's parent folder
                            </note>
                        </para>
                        <para>
                            <filename>impl/components/layout/NotLoggedIn/dom/index.xhtml:</filename>
                            <programlisting language="brush: html"><xi:include
                                    href="files/impl/components/layout/NotLoggedIn/dom/index-1.xhtml" parse="text" /></programlisting>
                        </para>
                        <para>
                            <filename>index.xhtml</filename> file could be any content, but by default layout will render into
                            <emphasis>section</emphasis> tag (this also could be changed).
                        </para>

                        <para>
                            <filename>impl/components/layout/NotLoggedIn/logic/NotLoggedIn.js:</filename>
                            <programlisting language="brush: js"><xi:include
                                    href="files/impl/components/layout/NotLoggedIn/logic/NotLoggedIn.js"
                                    parse="text" /></programlisting>
                        </para>

                        <para>
                            <filename>impl/components/layout/NotLoggedIn/style/style.scss:</filename>
                            <programlisting language="brush: sass"><xi:include
                                    href="files/impl/components/layout/NotLoggedIn/style/style.scss"
                                    parse="text" /></programlisting>
                        </para>
                       <para>And change <filename>include.list</filename> to following format:</para>

                       <programlisting language="brush: plain"><xi:include href="files/include-2.list"
                                                                           parse="text" /></programlisting>

                        <para>
                            Now rebuild application again, and refresh a page. New JavaScript error should appear: <emphasis>No page component found</emphasis>

                            <graphic fileref="img/no-page-component-found.png" />

                            That means that remains need to add a <emphasis>page</emphasis> component.
                        </para>
                    </para>
                    </section>

                <section>
                    <title>Add page component</title>

                    <para>
                        Lets create <emphasis>page</emphasis> component as in the following figure below:

                        <graphic fileref="img/login-page.png" />
                    </para>
                    <para>
                        <filename>impl/components/page/Login/dom/index.xhtml:</filename>
                        <programlisting language="brush: html"><xi:include
                                href="files/impl/components/page/Login/dom/index.xhtml" parse="text" /></programlisting>
                    </para>
                    <para>
                        <filename>impl/components/page/Login/logic/Login.js:</filename>
                        <programlisting language="brush: js"><xi:include
                                href="files/impl/components/page/Login/logic/Login.js" parse="text" /></programlisting>
                    </para>
                    <para>
                        <filename>impl/components/page/Login/style/style.scss:</filename>
                        <programlisting language="brush: sass"><xi:include
                                href="files/impl/components/page/Login/style/style.scss"
                                parse="text" /></programlisting>
                    </para>
                    <para>
                        <filename>include.list:</filename>
                        <programlisting language="brush: plain"><xi:include href="files/include-3.list"
                                                                            parse="text" /></programlisting>
                    </para>
                    <para>Now, rebuild and refresh page. You should be as the following:</para>
                    <graphic fileref="img/page-not-found.png" />
                    <para>It's because for each page framework does one request. In this case this name is the same as page component name (this can be configured)</para>
                    <para>Lets create a folder, <filename class="folder">data/pages</filename> and under that directory create <filename>Login.json</filename> file with empty <emphasis>JSON</emphasis> content</para>
                    <programlisting language="brush: js"><![CDATA[{ }]]></programlisting>
                    <para>and refresh page. Now you have to see as the following:</para>
                    <graphic fileref="img/first-working-app.png" />

                    <para>Pay attention, that there's success server request, browser <emphasis>URL</emphasis> changed to <emphasis>#path=Login</emphasis> and we have <emphasis>LAYOUT</emphasis> and <emphasis>PAGE</emphasis> text.</para>
                    <para>Lets see how indeed <emphasis>NKF</emphasis> does all stuff for us:</para>

                    <graphic fileref="img/framework-dom-structure.png" />

                    <para>
                        Lets pay attention to the following:
                    </para>

                    <para>
                        <emphasis>data-nkf-component-type</emphasis> attribute contains information about <emphasis>component</emphasis> type. Available types are: <emphasis>layout</emphasis>, <emphasis>page</emphasis>, <emphasis>widget</emphasis>
                    </para>
                    <para>
                       <emphasis>data-nkf-component-name</emphasis> attribute contains information about <emphasis>component</emphasis> name
                    </para>
                </section>
            </section>
            <section>
                <title>Move further. Play around with layout, page and widget components</title>

                <para>Now, for best explanation how layout, page and widget works together, lets create something useful.
                    Lets create simple fake login page, and after user will "login", we will redirect to "Logged In" page.
                    In that example we will explain a lot things..</para>
                <para>First, lets reset all default <emphasis>User Agent</emphasis> CSS styles. For that, just create <filename>reset.scss</filename></para>
                <filename>impl/extra/style/reset.scss:</filename>
                <programlisting language="brush: sass"><xi:include href="files/app1/impl/extra/style/reset.scss"
                                                                   parse="text" /></programlisting>

                <para>Now, lets create main style file:</para>
                <filename>impl/extra/style/main.scss:</filename>
                <programlisting language="brush: sass"><xi:include href="files/app1/impl/extra/style/main.scss"
                                                                   parse="text" /></programlisting>

                <note>You don't need to define your resource files (xml, xhtml, json, css, scss, svg, etc) into <filename>include.list</filename> except only <emphasis>JavaScript</emphasis>.</note>
                <para>Next step, create all necessary components. Lets start from <emphasis>layout</emphasis>. Default not logged in layout called <emphasis>NotLoggedIn</emphasis>.</para>

                <filename>impl/components/layout/NotLoggedIn/dom/index.xhtml:</filename>
                <programlisting language="brush: html; highlight: [13, 14]"><xi:include
                        href="files/app1/impl/components/layout/NotLoggedIn/dom/index.xhtml" parse="text" /></programlisting>
                <para>By default, layout component render it's content (<emphasis>page</emphasis>) into <emphasis>section</emphasis> tag. That's why in our layout html presents <emphasis>section</emphasis> tag</para>

                <note>It's encourage to use new <emphasis>HTML5</emphasis> semantic tags.</note>

                <para>
                <filename>impl/components/layout/NotLoggedIn/logic/NotLoggedIn.js:</filename>
                <programlisting language="brush: js"><xi:include
                        href="files/app1/impl/components/layout/NotLoggedIn/logic/NotLoggedIn.js"
                        parse="text" /></programlisting>
                </para>
                <para>It's just typical skeleton <emphasis>JavaScript</emphasis> file</para>

                <para>
                <filename>impl/components/layout/NotLoggedIn/style/style.scss:</filename>
                <programlisting language="brush: scss; highlight: [3]"><xi:include
                        href="files/app1/impl/components/layout/NotLoggedIn/style/style.scss"
                        parse="text" /></programlisting>
                </para>
                <para>Here, we just create a red border to indicate that we are not logged in.</para>

                <note>Pay attention of using <emphasis>CSS3</emphasis> attribute selector</note>

                <para>Now, time to create logged in <emphasis>layout</emphasis>.</para>

                <para>
                <filename>impl/components/layout/LoggedIn/dom/index.xhtml:</filename>
                <programlisting language="brush: html; highlight: [5, 15]"><xi:include
                        href="files/app1/impl/components/layout/LoggedIn/dom/index.xhtml"
                        parse="text" /></programlisting>
                </para>
                <para>Here we have the same as for not logged in <emphasis>layout</emphasis>, except menu. It has another set of items. That we done specially to distinguish difference between logged in and not logged in state.</para>
                <para>JavaScript file is the same as for <emphasis>NotLoggedIn</emphasis> layout.</para>
                <para>
                <filename>impl/components/layout/LoggedIn/style/style.scss:</filename>
                <programlisting language="brush: scss; highlight: [3]"><xi:include
                        href="files/app1/impl/components/layout/LoggedIn/style/style.scss"
                        parse="text" /></programlisting>
                </para>
                <para>Style is also the same, except green border color. That's all for <emphasis>layout</emphasis>. Now, remains to write default <emphasis>page</emphasis> components.</para>

                <para>Default page name for not logged in state called <emphasis>NotLoggedIn</emphasis>.</para>
                <para>
                <filename>impl/components/page/NotLoggedIn/dom/index.xhtml:</filename>
                <programlisting language="brush: html; highlight: [2]"><xi:include
                        href="files/app1/impl/components/page/NotLoggedIn/dom/index.xhtml"
                        parse="text" /></programlisting>
                </para>
                <para>Line #2 says that widget with name <emphasis>Login</emphasis> will be included here.</para>
                <para>
                <filename>impl/components/page/NotLoggedIn/logic/NotLoggedIn.js:</filename>
                <programlisting language="brush: js"><xi:include
                        href="files/app1/impl/components/page/NotLoggedIn/logic/NotLoggedIn.js"
                        parse="text" /></programlisting>
                </para>
                <para>As other <emphasis>JavaScript</emphasis> skeleton files this one will be the same.</para>
                <para>Now, lets create logged in page. By default it called <emphasis>Home</emphasis>.</para>
                <para>
                     <filename>impl/components/page/Home/dom/index.xhtml:</filename>
                     <programlisting language="brush: html; highlight: [2]"><xi:include
                             href="files/app1/impl/components/page/Home/dom/index.xhtml"
                             parse="text" /></programlisting>
                </para>
                <para>Here we have the same picture. In this <emphasis>page</emphasis> component includes <emphasis>widget</emphasis> with name <emphasis>Controls</emphasis></para>
                <para><emphasis>JavaScript</emphasis> skeleton file will be the same as for previous one.</para>
                <para>
                     <filename>impl/components/page/Home/style/style.scss:</filename>
                     <programlisting language="brush: scss"><xi:include
                             href="files/app1/impl/components/page/Home/style/style.scss"
                             parse="text" /></programlisting>
                </para>
                <para>Very simple styling...</para>
                <para>Now remains to implement widgets. Lets start from <emphasis>Controls</emphasis></para>
                <para>
                     <filename>impl/components/widget/Controls/dom/index.xhtml:</filename>
                     <programlisting language="brush: html"><xi:include
                             href="files/app1/impl/components/widget/Controls/dom/index.xhtml"
                             parse="text" /></programlisting>
                </para>
                <para>Here will be just <emphasis>logout</emphasis> button.</para>

                <note>Recommended to use class for wrap tag as <emphasis>YOUR_COMPONENT_NAME_IN_LOWER_CASE-wrapper</emphasis>, but it's not required.</note>

                <para>
                     <filename>impl/components/widget/Controls/logic/Controls.js:</filename>
                     <programlisting language="brush: js; highlight: [32, 34]"><xi:include
                             href="files/app1/impl/components/widget/Controls/logic/Controls.js"
                             parse="text" /></programlisting>
                    <para>Here we add listener, and on click we do logout, by</para>
                    <programlisting language="brush: js">$ComponentManager.doLogin(false);</programlisting>
                </para>
                <para>
                     <filename>impl/components/widget/Controls/style/style.scss:</filename>
                     <programlisting language="brush: js"><xi:include
                             href="files/app1/impl/components/widget/Controls/style/style.scss"
                             parse="text" /></programlisting>
                </para>
                <para>And the last one <emphasis>widget</emphasis> - <emphasis>Login</emphasis></para>
                <para>
                     <filename>impl/components/widget/Login/dom/index.xhtml:</filename>
                     <programlisting language="brush: html"><xi:include
                             href="files/app1/impl/components/widget/Login/dom/index.xhtml"
                             parse="text" /></programlisting>
                </para>
                <para>Here we created a login form, so user can put username and password. Of course we will not check credentials, but to show how it works - it good example.</para>
                <para>
                     <filename>impl/components/widget/Login/logic/Login.js:</filename>
                     <programlisting language="brush: js; highlight: [38, 40]"><xi:include
                             href="files/app1/impl/components/widget/Login/logic/Login.js"
                             parse="text" /></programlisting>
                </para>
                <para>
                    Here we prevent sending real <emphasis>POST</emphasis> request to server by line #31, and check if user entered credentials. If so, we just doing login by:
                </para>

                <programlisting language="brush: js">$ComponentManager.doLogin(true);</programlisting>

                <para>
                     <filename>impl/components/widget/Login/style/style.scss:</filename>
                     <programlisting language="brush: scss"><xi:include
                             href="files/app1/impl/components/widget/Login/style/style.scss"
                             parse="text" /></programlisting>
                </para>
                <para>Now lets include all required <emphasis>JavaScript</emphasis> files in appropriate order:</para>
                <para>
                    <filename>build/include.list:</filename>
                     <programlisting language="brush: plain"><xi:include
                             href="files/app1/build/include.list"
                             parse="text" /></programlisting>
                </para>
                <note>You should include from <emphasis>widget</emphasis> to <emphasis>layout</emphasis></note>
                <para>Now, rebuild application and refresh a page. You have to get as the following:</para>

                <graphic fileref="img/app1-not-logged-in.png" />

                <para>Now enter any login and password and press OK. You will be immediately redirected to logged in page called <emphasis>Home</emphasis></para>

                <graphic fileref="img/app1-logged-in.png" />

                <para>Here a lot information we can learn. Lets considering what HTML was generated for <emphasis>not logged in</emphasis> state.</para>
                 <programlisting language="brush: html; highlight: [8, 9, 13, 25, 26]"><xi:include
                         href="files/app1/out/not-logged-in.xhtml"
                         parse="text" /></programlisting>
                <para>In lines 8, 9 we include our generated files by <emphasis>NKF build system</emphasis>.</para>
                <para>Pay attention for lines 13, 25, 26. <application>NikaFramework</application> creates for each component wrapper and gets it's <emphasis>type</emphasis>
                and <emphasis>name</emphasis>, with <emphasis>data-nkf-component-type</emphasis> and <emphasis>data-nkf-component-name</emphasis> attributes.
                </para>
                <para>Also, note that <emphasis>page</emphasis> component renders into <emphasis>section</emphasis>. But you can change that behaviour.</para>

                <para>When we entered credentials and press OK, we redirect to <emphasis>LoggedIn</emphasis> layout and <emphasis>Home</emphasis> page respectively</para>
                <para> Lets see generated <emphasis>HTML</emphasis> for <emphasis>login</emphasis> state.</para>

                <programlisting language="brush: html; highlight: [13, 30, 31]"><xi:include
                        href="files/app1/out/logged-in.xhtml"
                        parse="text" /></programlisting>

                <para>In that case, when we logged in, <emphasis>layout</emphasis> component changed from <emphasis>NotLoggedIn</emphasis> to <emphasis>LoggedIn</emphasis>, thus all <emphasis>HTML</emphasis>
                under <emphasis>body</emphasis> tag was rewritten. But <emphasis>HTML</emphasis> code above still the same. Later, when you try to change page within the confines of current <emphasis>layout</emphasis>,
                    you will find that will change only <emphasis>HTML</emphasis> under <emphasis>section</emphasis> tag.
                </para>
            </section>
            <section>
                <title>Configure NKF</title>
                <para>You can easy change default settings of <emphasis>NKF</emphasis> by redefining them.</para>
                <para>Examples:</para>
                <programlisting language="brush: js">nkf.conf.defaultNonLoginPage = "AccessDenied";</programlisting>
                <para>Add this line in <filename>app.js</filename> before trigger <emphasis>Controller</emphasis>, rebuild application, logout and refresh browser page. You should find
                that <emphasis>URL</emphasis> changed to <emphasis>/#path=AccessDenied</emphasis> and <emphasis>JavaScript</emphasis> exception threw, as we don't have
                that class defined.
                </para>

                <para>You can also change render <emphasis>layout</emphasis> and <emphasis>page</emphasis> components render selector:</para>
                <programlisting language="brush: js">nkf.conf.render.layout.selector = "#container";</programlisting>
                <para>in that case instead of <emphasis>section</emphasis> tag <emphasis>page</emphasis> component will render into <emphasis>#container</emphasis> selector.</para>

                <para>All settings that could be configured you can find at <filename>conf.json</filename> file.</para>
            </section>
        </section>
    </article>
</book>
